@using ZhihuClone.Web.Models.Comment
@model CommentViewModel

<div class="comment" id="comment-@Model.Id">
    <div class="comment-header">
        <img src="@Model.UserAvatar" alt="@Model.UserName" class="avatar" />
        <span class="username">@Model.UserName</span>
        <span class="time">@Model.CreatedAt.ToString("yyyy-MM-dd HH:mm")</span>
    </div>
    <div class="comment-content">@Model.Content</div>
    <div class="comment-footer">
        <div class="actions">
            <a href="#" class="like-btn @(Model.IsLiked ? "liked" : "")" 
               data-comment-id="@Model.Id">
                <i class="fas fa-thumbs-up"></i>
                <span class="like-count">@Model.LikeCount</span>
            </a>
            <a href="#" class="reply-btn" data-comment-id="@Model.Id">
                <i class="fas fa-reply"></i>
                回复
            </a>
            @if (User.Identity?.IsAuthenticated == true)
            {
                <a href="#" class="report-btn" data-comment-id="@Model.Id">
                    <i class="fas fa-flag"></i>
                    举报
                </a>
            }
            @if (Model.UserId == ViewBag.CurrentUserId)
            {
                <a href="#" class="edit-btn" data-comment-id="@Model.Id">
                    <i class="fas fa-edit"></i>
                    编辑
                </a>
                <a href="#" class="delete-btn" data-comment-id="@Model.Id">
                    <i class="fas fa-trash"></i>
                    删除
                </a>
            }
        </div>
    </div>
    @if (Model.Replies != null && Model.Replies.Any())
    {
        <div class="replies">
            @foreach (var reply in Model.Replies)
            {
                <partial name="_CommentPartial" model="reply" />
            }
        </div>
    }
    <div class="reply-form" style="display: none;">
        <form method="post" action="/api/comments/@Model.Id/reply">
            <textarea name="content" class="form-control" rows="3" required></textarea>
            <button type="submit" class="btn btn-primary mt-2">提交回复</button>
        </form>
    </div>
</div>

<script>
    // 点赞功能
    document.querySelector('#comment-@Model.Id .like-btn').addEventListener('click', async function() {
        const commentId = this.dataset.commentId;
        const isLiked = this.dataset.liked === 'true';
        const url = isLiked ? `/Comment/Unlike/${commentId}` : `/Comment/Like/${commentId}`;
        
        try {
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            
            if (response.ok) {
                const result = await response.json();
                if (result.success) {
                    const icon = this.querySelector('i');
                    const countSpan = this.querySelector('.like-count');
                    
                    this.dataset.liked = (!isLiked).toString();
                    icon.className = `bi bi-heart${!isLiked ? '-fill' : ''}`;
                    this.className = `btn btn-link p-0 me-3 like-btn ${!isLiked ? 'text-danger' : 'text-dark'}`;
                    countSpan.textContent = result.likeCount;
                }
            }
        } catch (error) {
            console.error('Error:', error);
        }
    });

    // 回复功能
    document.querySelector('#comment-@Model.Id .reply-btn')?.addEventListener('click', function() {
        const commentId = this.dataset.commentId;
        const replyForm = document.querySelector(`#comment-${commentId} .reply-form`);
        if (replyForm) {
            replyForm.classList.remove('d-none');
            replyForm.querySelector('textarea').focus();
        }
    });

    document.querySelector('#comment-@Model.Id .cancel-reply')?.addEventListener('click', function() {
        const replyForm = this.closest('.reply-form');
        replyForm.classList.add('d-none');
        replyForm.querySelector('textarea').value = '';
        replyForm.querySelector('input[type="checkbox"]').checked = false;
    });

    document.querySelector('#comment-@Model.Id .comment-form')?.addEventListener('submit', async function(e) {
        e.preventDefault();
        const postId = this.dataset.postId;
        const parentId = this.dataset.parentId;
        const content = this.querySelector('textarea').value;
        const isAnonymous = this.querySelector('input[type="checkbox"]').checked;
        
        try {
            const response = await fetch('/Comment/Create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    postId,
                    parentCommentId: parentId,
                    content,
                    isAnonymous
                })
            });
            
            if (response.ok) {
                const result = await response.text();
                const repliesContainer = this.closest('.comment').querySelector('.replies');
                if (repliesContainer) {
                    repliesContainer.insertAdjacentHTML('afterbegin', result);
                }
                this.querySelector('textarea').value = '';
                this.querySelector('input[type="checkbox"]').checked = false;
                this.closest('.reply-form').classList.add('d-none');
            }
        } catch (error) {
            console.error('Error:', error);
        }
    });

    // 举报功能
    document.querySelector('#comment-@Model.Id .report-btn').addEventListener('click', function() {
        reportTargetId = this.dataset.commentId;
        reportTargetType = 'comment';
        document.getElementById('report-target-id').value = reportTargetId;
        document.getElementById('report-target-type').value = reportTargetType;
        new bootstrap.Modal(document.getElementById('reportModal')).show();
    });
</script> 